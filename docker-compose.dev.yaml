version: "3.5"

services:
  frontend-auth:
    container_name: frontend-auth
    restart: unless-stopped
    image: frontend-auth
    build:
      context: service_frontend_auth
      target: ${EOSC_PERF_ENV}
    env_file: .env
    environment:
      TODO: "fix this env variables on docker-compose"
      SECRET_KEY_FILE: /run/secrets/cookie_secret
      OIDC_CLIENT_SECRET_FILE: /run/secrets/oidc_secret
    networks:
      - frontend-net
      - backend-net
      - smtp-net
    secrets:
      - cookie_secret
      - oidc_secret

  frontend-app:
    container_name: frontend-app
    restart: unless-stopped
    image: frontend-app
    build:
      context: frontend-js
    networks:
      - frontend-net
    #volumes:
    #  - ./frontend-js/:/app

  backend_v1:
    container_name: backend_v1
    restart: unless-stopped
    image: backend
    build:
      context: ./service_backend
      target: ${EOSC_PERF_ENV}
      args:
        INSTALL_PYTHON_VERSION: 3.8
    depends_on:
      - database
    env_file: .env
    environment:
      BACKEND_URL: /api/v1
      FLASK_APP: autoapp.py
      FLASK_ENV: ${EOSC_PERF_ENV}
      GUNICORN_WORKERS: ${BACKEND_WORKERS}
      SECRET_KEY_FILE: /run/secrets/cookie_secret
      OIDC_CLIENT_ID: ${OIDC_CLIENT_ID}
      OIDC_CLIENT_SECRET_FILE: /run/secrets/oidc_secret
      ADMIN_ENTITLEMENTS: ${ADMIN_ENTITLEMENTS}
      DB_HOST: database
      DB_PORT: 5432
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      MAIL_SUPPORT: ${MAIL_SUPPORT}
      MAIL_FROM: ${MAIL_FROM}
      MAIL_SERVER: postfix
      MAIL_PORT: 25
    command: ["sh", "-c", "pip install debugpy -t /tmp && python /tmp/debugpy --wait-for-client --listen 0.0.0.0:5678 -m flask run --no-debugger --no-reload --host 0.0.0.0 --port 5000"]
    volumes:
      - ./service_backend/:/app
    networks:
      - frontend-net
      - backend-net
      - smtp-net
    ports:
      - 5000:5000
      - 5678:5678
    secrets:
      - cookie_secret
      - oidc_secret

  database:
    container_name: database
    restart: unless-stopped
    image: postgres
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      PGDATA: /data
    volumes:
      - postgres:/data
    networks:
      - backend-net
    ports:
      - "5432:5432"

  reverse_proxy:
    container_name: reverse_proxy
    restart: unless-stopped
    image: reverse_proxy
    build:
      context: ./service_rproxy
      target: development
    depends_on:
      - frontend-auth
      - backend_v1
      - certificate
    env_file: .env
    volumes:
      # - ./frontend-js/build/:/var/www/web/
      #  - ./frontend_client/src:/var/www/web/js/
      - ./service_certificate/conf:/etc/letsencrypt
      - ./service_certificate/www:/var/www/certbot/
    secrets:
      - nginx_api_credentials
    networks:
      - frontend-net
      - smtp-net
    ports:
      - "80:80"
      - "443:443"
    environment:
      BACKEND_URL: /api

  certificate:
    container_name: certificate
    restart: unless-stopped
    image: certificate
    build:
      context: ./service_certificate
    env_file: .env
    volumes:
      - ./service_certificate/conf:/etc/letsencrypt
      - ./service_certificate/www:/var/www/certbot
    secrets:
      - nginx_api_credentials

  postfix:
    image: postfix
    restart: unless-stopped
    container_name: postfix
    build:
      context: service_postfix
    volumes:
      - ./service_certificate/conf:/etc/letsencrypt
      - ./logs/postfix:/var/log
    env_file: .env
    ports:
      - "25:25"
    networks:
      - smtp-net

networks:
  frontend-net:
  backend-net:
  smtp-net:

volumes:
  postgres:

secrets:
  cookie_secret:
    file: cookie_secret.txt
  oidc_secret:
    file: oidc_secret.txt
  nginx_api_credentials:
    file: nginx_api_credentials.txt
