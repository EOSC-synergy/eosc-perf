/*
    The Diagram class is responsible of taking previously stored results and
    rendering them into a comparison diagram.
*/

function getData() {
    return [
        [
            /**
             * Numbers generated by:
             *   - Amdahl's Law, 1/(1-p+p/s) where p = 0.75, s = corecount
             */
            { corecount: 1, score: 1.0 },
            { corecount: 2, score: 1.6 },
            { corecount: 3, score: 2.0 },
            { corecount: 4, score: 2.2857 },
            { corecount: 5, score: 2.5 },
            { corecount: 6, score: 2.6667 },
            { corecount: 7, score: 2.8 },
            { corecount: 8, score: 2.9091 },
            { corecount: 9, score: 3.0 },
            { corecount: 10, score: 3.0769 },
            { corecount: 11, score: 3.1429 },
            { corecount: 12, score: 3.2 },
            { corecount: 13, score: 3.25 },
            { corecount: 14, score: 3.2941 },
            { corecount: 15, score: 3.3333 },
            { corecount: 16, score: 3.3684 },
            { corecount: 17, score: 3.4 },
            { corecount: 18, score: 3.4286 },
            { corecount: 19, score: 3.4545 },
            { corecount: 20, score: 3.4783 },
            { corecount: 21, score: 3.5 },
            { corecount: 22, score: 3.52 },
            { corecount: 23, score: 3.5385 },
            { corecount: 24, score: 3.5556 },
            { corecount: 25, score: 3.5714 },
            { corecount: 26, score: 3.5862 },
            { corecount: 27, score: 3.6 },
            { corecount: 28, score: 3.6129 },
            { corecount: 29, score: 3.625 },
            { corecount: 30, score: 3.6364 },
            { corecount: 31, score: 3.6471 },
            { corecount: 32, score: 3.6571 },
            { corecount: 33, score: 3.6667 },
            { corecount: 34, score: 3.6757 },
            { corecount: 35, score: 3.6842 },
            { corecount: 36, score: 3.6923 },
            { corecount: 37, score: 3.7 },
            { corecount: 38, score: 3.7073 },
            { corecount: 39, score: 3.7143 },
            { corecount: 40, score: 3.7209 },
            { corecount: 41, score: 3.7273 },
            { corecount: 42, score: 3.7333 },
            { corecount: 43, score: 3.7391 },
            { corecount: 44, score: 3.7447 },
            { corecount: 45, score: 3.75 },
            { corecount: 46, score: 3.7551 },
            { corecount: 47, score: 3.76 },
            { corecount: 48, score: 3.7647 },
            { corecount: 49, score: 3.7692 },
            { corecount: 50, score: 3.7736 },
            { corecount: 51, score: 3.7778 },
            { corecount: 52, score: 3.7818 },
            { corecount: 53, score: 3.7857 },
            { corecount: 54, score: 3.7895 },
            { corecount: 55, score: 3.7931 },
            { corecount: 56, score: 3.7966 },
            { corecount: 57, score: 3.8 },
            { corecount: 58, score: 3.8033 },
            { corecount: 59, score: 3.8065 },
            { corecount: 60, score: 3.8095 },
            { corecount: 61, score: 3.8125 },
            { corecount: 62, score: 3.8154 },
            { corecount: 63, score: 3.8182 },
            { corecount: 64, score: 3.8209 },
        ]
    ];
}

let chartColors = [
    'rgb(255, 99, 132)', // red
    'rgb(255, 159, 64)', // orange
    'rgb(255, 205, 86)', // yellow
    'rgb(75, 192, 192)', // green
    'rgb(54, 162, 235)', // blue
    'rgb(153, 102, 255)', // purple
    'rgb(201, 203, 207)' // gray
];

class Diagram extends Content {
    // todo: add nulls for columns this dataset has no value for
    buildDataset(data, index) {
        let color = Chart.helpers.color;
        let scores = [];
        for (const value of data) {
            scores.push(value.score);
        }
        let dataSet = {
            label: 'score',
            backgroundColor: color(chartColors[index]).alpha(0.5).rgbString(),
            borderColor: chartColors[index],
            borderWidth: 1,
            data: scores,
            spanGaps: true
        };
        return dataSet;
    }

    // todo: sum of all datasets' corecounts
    buildLabels(data, index) {
        let labels = [];
        for (const value of data) {
            labels.push(value.corecount.toString() + ' cores');
        }
        return labels;
    }

    // update method inherited from Content
    update() {
        let results = getData();

        let dataSets = [];
        for (let i = 0; i < results.length; i++) {
            let dataset = this.buildDataset(results[i], i);
            dataSets.push(dataset);
        }
        let labels = this.buildLabels(results[0]);

        let context = document.getElementById('speedup').getContext('2d');
        window.diagram = new Chart(context, {
            type: 'line',
            data: {
                labels: labels,
                datasets: dataSets,
            },
            options: {
                responsive: true,
                legend: {
                    position: 'bottom',
                },
                title: {
                    display: true,
                    text: 'Benchmark speedup'
                },
                scales: {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true
                        }
                    }]
                }
            }
        });
    }
}

diagram = new Diagram();

window.onload = function () {
    diagram.update();
};
