version: "3.5"

services:
  frontend-app:
    container_name: frontend-app
    restart: unless-stopped
    image: frontend-app
    build:
      context: service_frontend
      network: host
      target: development
    networks:
      - frontend-net
    environment:
      NEXT_PUBLIC_OIDC_CLIENT_ID: eosc-performance
      NEXT_PUBLIC_OIDC_REDIRECT_HOST: https://${DOMAIN}
      NEXT_PUBLIC_API_ROUTE: https://${DOMAIN}/api/v1
      NEXT_PUBLIC_OAUTH_AUTHORITY: ${EGI_OP}
    #volumes:
    #  - ./service_frontend/:/app      
    volumes:
      - ./service_frontend/components:/app/components
      - ./service_frontend/pages:/app/pages
      - ./service_frontend/styles:/app/styles

  backend_v1:
    container_name: backend_v1
    restart: unless-stopped
    image: backend
    build:
      context: service_backend
      network: host
      target: development
      args:
        INSTALL_PYTHON_VERSION: 3.8
    depends_on:
      - database
    env_file: .env
    environment:
      BACKEND_ROUTE: /api/v1
      FLASK_APP: autoapp.py
      FLASK_ENV: development
      GUNICORN_WORKERS: 4
      SECRET_KEY_FILE: /run/secrets/cookie_secret
      TRUSTED_OP_LIST: ${EGI_OP}
      ADMIN_ENTITLEMENTS: ${ADMIN_ENTITLEMENTS}
      DB_HOST: database
      DB_PORT: 5432
      DB_USER: ${DB_USER}
      DB_PASSWORD_FILE: /run/secrets/database_secret
      DB_NAME: ${DB_NAME}
      MAIL_SUPPORT: ${MAIL_SUPPORT}
      MAIL_FROM: ${MAIL_FROM}
      MAIL_SERVER: postfix
      MAIL_PORT: 25
    volumes:
      - ./service_backend/:/app
    networks:
      - frontend-net
      - backend-net
      - smtp-net
    secrets:
      - cookie_secret
      - database_secret

  database:
    container_name: database
    restart: unless-stopped
    image: postgres:13
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_DB: ${DB_NAME}
      PGDATA: /data
      POSTGRES_PASSWORD_FILE: /run/secrets/database_secret
    volumes:
      - postgres:/data
      #- ./backups:/backups
    networks:
      - backend-net
    secrets:
      - database_secret

  reverse_proxy:
    container_name: reverse_proxy
    restart: unless-stopped
    image: reverse_proxy
    build:
      context: service_rproxy
      network: host
      target: development
    healthcheck:
      test: [ "CMD", "curl", "--silent", "--fail", "http://localhost" ]
      interval: 45s
      timeout: 5s
      retries: 3
    depends_on:
      - backend_v1
    env_file: .env
    environment:
      DOMAINS: ${DOMAIN}
      CERT_KEY_SIZE: ${CERT_KEY_SIZE}
      BACKEND_ROUTE: /api
    volumes:
      - ssl:/etc/letsencrypt
      - ssl:/var/www/certbot
    secrets:
      - nginx_api_credentials
    networks:
      - frontend-net
      - smtp-net
      - certbot-net
    ports:
      - "80:80"
      - "443:443"

  certificate:
    container_name: certificate
    restart: unless-stopped
    image: certificate
    build:
      context: service_certificate
      network: host
    env_file: .env
    networks:
      - certbot-net
    environment:
      DOMAINS: ${DOMAIN}
      NGINX_CREDENTIALS: /run/secrets/nginx_api_credentials
      LETSENCRYPT_EMAIL: ${LETSENCRYPT_EMAIL}
      LETSENCRYPT_STAGING: ${LETSENCRYPT_STAGING}
      CERT_KEY_SIZE: ${CERT_KEY_SIZE}
    volumes:
      - ssl:/etc/letsencrypt
      - ssl:/var/www/certbot
    secrets:
      - nginx_api_credentials

  postfix:
    image: postfix
    restart: unless-stopped
    container_name: postfix
    build:
      context: service_postfix
      network: host
    volumes:
      - ssl:/etc/letsencrypt
    env_file: .env
    environment:
      DOMAINS: ${DOMAIN}
    networks:
      - smtp-net

  database_backup:
    image: database_backup
    restart: unless-stopped
    container_name: database_backup
    build:
      context: service_backup
      network: host
    volumes:
      - ./backups:/workdir
    depends_on:
      - database
    networks:
      - backend-net
    environment:
      POSTGRES_HOST: database
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD_FILE: /run/secrets/database_secret
      POSTGRES_DB: ${DB_NAME}
    secrets:
      - database_secret

networks:
  frontend-net:
  backend-net:
  smtp-net:
  certbot-net:

volumes:
  postgres:
  ssl: { }

secrets:
  cookie_secret:
    file: cookie_secret.txt
  database_secret:
    file: database_secret.txt
  nginx_api_credentials:
    file: nginx_api_credentials.txt
