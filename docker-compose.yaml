version: "3.5"

services:
  frontend-app:
    container_name: frontend-app
    restart: unless-stopped
    image: frontend-app
    build:
      context: service_frontend
      target: development
    networks:
      - frontend-net
    #volumes:
    #  - ./service_frontend/:/app
    volumes:
      - ./service_frontend/components:/app/components
      - ./service_frontend/pages:/app/pages
      - ./service_frontend/styles:/app/styles

  backend_v1:
    container_name: backend_v1
    restart: unless-stopped
    image: backend
    build:
      context: ./service_backend
      target: development
      args:
        INSTALL_PYTHON_VERSION: 3.8
    depends_on:
      - database
    env_file: .env
    environment:
      BACKEND_URL: /api/v1
      FLASK_APP: autoapp.py
      FLASK_ENV: development
      GUNICORN_WORKERS: 1
      SECRET_KEY_FILE: /run/secrets/cookie_secret
      OIDC_CLIENT_ID: ${OIDC_CLIENT_ID}
      OIDC_CLIENT_SECRET_FILE: /run/secrets/oidc_secret
      ADMIN_ENTITLEMENTS: ${ADMIN_ENTITLEMENTS}
      DB_HOST: database
      DB_PORT: 5432
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      MAIL_SUPPORT: ${MAIL_SUPPORT}
      MAIL_FROM: ${MAIL_FROM}
      MAIL_SERVER: postfix
      MAIL_PORT: 25
    volumes:
      - ./service_backend/:/app
    networks:
      - frontend-net
      - backend-net
      - smtp-net
    ports:
      - 5000:5000
      - 5678:5678
    secrets:
      - cookie_secret
      - oidc_secret

  database:
    container_name: database
    restart: unless-stopped
    image: postgres
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      PGDATA: /data
    volumes:
      - postgres:/data
      #- ./backups:/backups
    networks:
      - backend-net
    ports:
      - "5432:5432"

  reverse_proxy:
    container_name: reverse_proxy
    restart: unless-stopped
    image: reverse_proxy
    build:
      context: ./service_rproxy
      target: development
    depends_on:
      - backend_v1
      - certificate
    env_file: .env
    environment:
      DOMAIN: ${DOMAIN}
      BACKEND_URL: /api
    volumes:
      - ./service_certificate/conf:/etc/letsencrypt
      - ./service_certificate/www:/var/www/certbot/
    secrets:
      - nginx_api_credentials
    networks:
      - frontend-net
      - smtp-net
    ports:
      - "80:80"
      - "443:443"

  certificate:
    container_name: certificate
    restart: unless-stopped
    image: certificate
    build:
      context: ./service_certificate
    env_file: .env
    environment:
      NGINX_CREDENTIALS: /run/secrets/nginx_api_credentials
    volumes:
      - ./service_certificate/conf:/etc/letsencrypt
      - ./service_certificate/www:/var/www/certbot
    secrets:
      - nginx_api_credentials

  postfix:
    image: postfix
    restart: unless-stopped
    container_name: postfix
    build:
      context: service_postfix
    volumes:
      - ./service_certificate/conf:/etc/letsencrypt
      - ./logs/postfix:/var/log
    env_file: .env
    environment:
      DOMAIN: ${DOMAIN}
    ports:
      - "25:25"
    networks:
      - smtp-net

  database_backup:
    image: postgres_backup
    build:
      context: service_backup
    volumes:
      - ./backups:/workdir
    depends_on:
      - database
    networks:
      - backend-net
    environment:
      - DB_HOST=database
      - DB_PORT=5432
      - DB_DATABASE=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}

networks:
  frontend-net:
  backend-net:
  smtp-net:

volumes:
  postgres:

secrets:
  cookie_secret:
    file: cookie_secret.txt
  oidc_secret:
    file: oidc_secret.txt
  nginx_api_credentials:
    file: nginx_api_credentials.txt
